/**
 * Reverse an array and return a sequence.
 */
export declare function reverseArray<T>(arr: T[]): Generator<T, void, unknown>;
/**
 * Iterate a sequence in a functional style.
 */
export declare function forEach<T>(seq: Iterable<T>, fn: (x: T) => void): void;
/**
 * Map and return a new sequence.
 */
export declare function map<T, U>(seq: Iterable<T>, fn: (x: T) => U): Generator<U, void, unknown>;
/**
 * Filter and return a new sequence.
 */
export declare function filter<T>(seq: Iterable<T>, predicate: (x: T) => boolean): Generator<T, void, unknown>;
/**
 * Perform reduce on a sequence.
 */
export declare function reduce<T, U>(seq: Iterable<T>, fn: (prev: U, curr: T) => U, initialValue?: U): U;
/**
 * Find an element in a sequence.
 */
export declare function find<T>(seq: Iterable<T>, predicate: (x: T) => boolean): T | undefined;
/**
 * Check if an element in the sequence meets predicate.
 */
export declare function some<T>(seq: Iterable<T>, predicate: (x: T) => boolean): boolean;
/**
 * Check if all elements in the sequence meet predicate.
 */
export declare function every<T>(seq: Iterable<T>, predicate: (x: T) => boolean): boolean;
/**
 * Find the first minimum element in the given sequence.
 * You need to provide a accessor `by` for the comparison purpose.
 */
export declare function min<T>(seq: Iterable<T>, by: (x: T) => number): T | undefined;
/**
 * Find the first maximum element in the given sequence.
 * You need to provide a accessor `by` for the comparison purpose.
 */
export declare function max<T>(seq: Iterable<T>, by: (x: T) => number): T | undefined;
