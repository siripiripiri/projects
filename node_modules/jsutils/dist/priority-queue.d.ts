import { MaxHeap, MinHeap } from "./heap";
declare abstract class PriorityQueue<T> {
    protected abstract _priorities: MaxHeap | MinHeap;
    private _data;
    private _length;
    /**
     * Number of elements in the queue.
     */
    get length(): number;
    /**
     * Push an element onto the queue.
     *
     * @param priority Priority of the element.
     * @param val Element to push.
     */
    push(priority: number, val: T): void;
    /**
     * Pop an element from the queue.
     */
    pop(): T | undefined;
    /**
     * Preview the element to pop next.
     */
    peek(): T | undefined;
    /**
     * Preview the next priority number.
     */
    peekPriority(): number | undefined;
}
/**
 * A priority queue where bigger numbers have higher
 * priorities.
 *
 * ```ts
 * const queue = new MaxPriorityQueue<string>()
 * queue.push(1, "1")
 * queue.push(2, "2")
 * queue.pop() // "2"
 * ```
 */
export declare class MaxPriorityQueue<T> extends PriorityQueue<T> {
    protected _priorities: MaxHeap<number>;
}
/**
 * A priority queue where smaller numbers have higher
 * priorities.
 *
 * ```ts
 * const queue = new MinPriorityQueue<string>()
 * queue.push(1, "1")
 * queue.push(2, "2")
 * queue.push(0, "0")
 * queue.pop() // "0"
 * ```
 */
export declare class MinPriorityQueue<T> extends PriorityQueue<T> {
    protected _priorities: MinHeap<number>;
}
export {};
