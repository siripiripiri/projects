/**
 * MaxHeap
 */
export declare class MaxHeap<T = number> {
    private _data;
    private _accessor;
    /**
     * Make an instance of MaxHeap.
     *
     * @param accessor Accessor function that gives the number to sort to.
     */
    constructor(accessor?: (x?: T) => number | undefined);
    /**
     * Number of elements in the heap.
     */
    get length(): number;
    /**
     * Preview the root value.
     */
    peek(): T | undefined;
    /**
     * Push a value onto the heap/
     */
    push(val: T): void;
    /**
     * Pop the root value.
     */
    pop(): T | undefined;
}
/**
 * MinHeap
 */
export declare class MinHeap<T = number> {
    private _data;
    private _accessor;
    /**
     * Make an instance of MinHeap.
     *
     * @param accessor Accessor function that gives the number to sort to.
     */
    constructor(accessor?: (x?: T) => number | undefined);
    /**
     * Number of elements in the heap.
     */
    get length(): number;
    /**
     * Preview the root value.
     */
    peek(): T | undefined;
    /**
     * Push a value onto the heap/
     */
    push(val: T): void;
    /**
     * Pop the root value.
     */
    pop(): T | undefined;
}
